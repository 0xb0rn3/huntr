#!/usr/bin/env bash
# Version: 0.1.1
# Enhanced features for Huntr tool

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Module configuration
MODULE_VERSION="1.1.0"
OUTPUT_DIR="./huntresults"
CONFIG_FILE="./huntrconfig.conf"

# Advanced configuration variables
ENABLE_IPV6=false
ENABLE_UDP_SCAN=false
ENABLE_OS_DETECTION=false
ENABLE_SERVICE_DETECTION=false
ENABLE_VULNERABILITY_SCAN=false
ENABLE_ARP_SCAN=false
CUSTOM_PORTS=""
SCAN_PROFILE="default"
MAX_PARALLEL_HOSTS=50
ADAPTIVE_TIMING=true

# Initialize module
init_v6_module() {
    echo -e "${BLUE}üîß Initializing v6module...${NC}"
    
    # Create output directory
    mkdir -p "$OUTPUT_DIR"
    
    # Load configuration if exists
    load_config
    
    # Check additional dependencies
    check_advanced_deps
}

# Load configuration from file
load_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        echo -e "${CYAN}üìÑ Loading configuration from $CONFIG_FILE${NC}"
        source "$CONFIG_FILE"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No config file found. Using defaults.${NC}"
        create_default_config
    fi
}

# Create default configuration file
create_default_config() {
    cat > "$CONFIG_FILE" << EOF
# Huntr Advanced Configuration
ENABLE_IPV6=false
ENABLE_UDP_SCAN=false
ENABLE_OS_DETECTION=false
ENABLE_SERVICE_DETECTION=false
ENABLE_VULNERABILITY_SCAN=false
ENABLE_ARP_SCAN=true
CUSTOM_PORTS="22,23,25,53,80,110,135,139,443,445,993,995,1723,3389,5900"
SCAN_PROFILE="default"
MAX_PARALLEL_HOSTS=50
ADAPTIVE_TIMING=true
EOF
    echo -e "${GREEN}‚úÖ Created default config: $CONFIG_FILE${NC}"
}

# Check for advanced dependencies
check_advanced_deps() {
    local deps=("arp-scan" "dig" "whois" "netstat")
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo -e "${YELLOW}‚ö†Ô∏è  Optional tool missing: $dep${NC}"
        fi
    done
}

# IPv6 network discovery
ipv6_discovery() {
    local network_base="$1"
    local scan_type="$2"
    
    echo -e "${PURPLE}üåê IPv6 Network Discovery${NC}"
    
    # Convert IPv4 base to IPv6 equivalent
    local ipv6_base="fe80::"
    
    if [[ "$scan_type" == "stealth" ]]; then
        echo -e "${CYAN}ü•∑ IPv6 Stealth Discovery${NC}"
        nmap -6 -sn -T1 --randomize-hosts "$ipv6_base/64" 2>/dev/null | \
        grep -oE "([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}" | \
        sort -u
    else
        echo -e "${GREEN}‚ö° IPv6 Fast Discovery${NC}"
        nmap -6 -sn -T4 "$ipv6_base/64" 2>/dev/null | \
        grep -oE "([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}" | \
        sort -u
    fi
}

# UDP service discovery
udp_service_scan() {
    local target="$1"
    local scan_type="$2"
    
    echo -e "${BLUE}üì° UDP Service Discovery: $target${NC}"
    
    local udp_ports="53,67,68,69,123,161,162,500,514,1434,1900,5353"
    local temp_results=$(mktemp)
    
    if [[ "$scan_type" == "stealth" ]]; then
        nmap -sU -T2 -p "$udp_ports" --open "$target" -oG "$temp_results" 2>/dev/null
    else
        nmap -sU -T4 -p "$udp_ports" --open "$target" -oG "$temp_results" 2>/dev/null
    fi
    
    # Parse UDP results
    local udp_services=$(grep "Ports:" "$temp_results" | \
                           grep -oE "[0-9]+/open/udp" | \
                           cut -d'/' -f1 | \
                           tr '\n' ',' | \
                           sed 's/,$//')
    
    if [[ -n "$udp_services" ]]; then
        echo -e "${GREEN}  ‚îî‚îÄ UDP Services: $udp_services${NC}"
    else
        echo -e "${YELLOW}  ‚îî‚îÄ No UDP services detected${NC}"
    fi
    
    rm -f "$temp_results"
}

# OS fingerprinting
os_fingerprint() {
    local target="$1"
    
    echo -e "${PURPLE}üñ•Ô∏è  OS Fingerprinting: $target${NC}"
    
    local temp_xml=$(mktemp)
    nmap -O -T4 --osscan-guess "$target" -oX "$temp_xml" 2>/dev/null
    
    # Parse OS information
    if command -v xmllint &> /dev/null; then
        local os_info=$(xmllint --xpath "//osmatch/@name" "$temp_xml" 2>/dev/null | \
                          head -1 | \
                          sed 's/name="\([^"]*\)".*/\1/')
        
        if [[ -n "$os_info" ]]; then
            echo -e "${GREEN}  ‚îî‚îÄ OS: $os_info${NC}"
        else
            echo -e "${YELLOW}  ‚îî‚îÄ OS detection failed${NC}"
        fi
    else
        local os_info=$(grep -oE 'name="[^"]*"' "$temp_xml" | head -1 | cut -d'"' -f2)
        if [[ -n "$os_info" ]]; then
            echo -e "${GREEN}  ‚îî‚îÄ OS: $os_info${NC}"
        else
            echo -e "${YELLOW}  ‚îî‚îÄ OS detection failed${NC}"
        fi
    fi
    
    rm -f "$temp_xml"
}

# Service version detection
service_version_scan() {
    local target="$1"
    local ports="$2"
    
    echo -e "${CYAN}üîç Service Version Detection: $target${NC}"
    
    local temp_xml=$(mktemp)
    nmap -sV -T4 -p "$ports" "$target" -oX "$temp_xml" 2>/dev/null
    
    # Parse service versions
    if command -v xmllint &> /dev/null; then
        xmllint --xpath "//port[@portid and state/@state='open']" "$temp_xml" 2>/dev/null | \
        grep -oE 'portid="[0-9]+".*?version="[^"]*"' | \
        while read -r line; do
            local port=$(echo "$line" | grep -oE 'portid="[0-9]+"' | cut -d'"' -f2)
            local version=$(echo "$line" | grep -oE 'version="[^"]*"' | cut -d'"' -f2)
            echo -e "${GREEN}  ‚îî‚îÄ Port $port: $version${NC}"
        done
    fi
    
    rm -f "$temp_xml"
}

# Vulnerability scanning with NSE scripts
vulnerability_scan() {
    local target="$1"
    local scan_type="$2"
    
    echo -e "${RED}üö® Vulnerability Scanning: $target${NC}"
    
    local nse_scripts=""
    if [[ "$scan_type" == "stealth" ]]; then
        nse_scripts="vuln and safe"
    else
        nse_scripts="vuln"
    fi
    
    local temp_results=$(mktemp)
    nmap --script "$nse_scripts" -T4 "$target" > "$temp_results" 2>/dev/null
    
    # Parse vulnerability results
    local vuln_count=$(grep -c "VULNERABLE" "$temp_results")
    
    if [[ $vuln_count -gt 0 ]]; then
        echo -e "${RED}  ‚îî‚îÄ Vulnerabilities found: $vuln_count${NC}"
        echo -e "${YELLOW}     Check full report: $OUTPUT_DIR/vuln_${target//[.:]/_}.txt${NC}"
        cp "$temp_results" "$OUTPUT_DIR/vuln_${target//[.:]/_}.txt"
    else
        echo -e "${GREEN}  ‚îî‚îÄ No vulnerabilities detected${NC}"
    fi
    
    rm -f "$temp_results"
}

# ARP scanning for local networks
arp_network_scan() {
    local network_base="$1"
    
    echo -e "${CYAN}üì∂ ARP Network Scanning${NC}"
    
    if command -v arp-scan &> /dev/null; then
        echo -e "${BLUE}Using arp-scan for discovery...${NC}"
        arp-scan -l 2>/dev/null | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}" | sort -V
    else
        echo -e "${BLUE}Using nmap ARP discovery...${NC}"
        nmap -PR -sn "${network_base}.1-254" 2>/dev/null | \
        grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}" | \
        grep -v "^${network_base%.*}" | sort -V
    fi
}

# Adaptive timing based on network response
adaptive_timing_scan() {
    local target="$1"
    local base_timing="$2"
    
    # Test network responsiveness
    local ping_time=$(ping -c 1 -W 2 "$target" 2>/dev/null | \
                      grep "time=" | \
                      grep -oE "time=[0-9.]+" | \
                      cut -d'=' -f2)
    
    if [[ -n "$ping_time" ]]; then
        local ping_ms=$(echo "$ping_time" | cut -d'.' -f1)
        
        if [[ $ping_ms -lt 10 ]]; then
            echo "T5"  # Insane timing for very fast networks
        elif [[ $ping_ms -lt 50 ]]; then
            echo "T4"  # Aggressive timing
        elif [[ $ping_ms -lt 100 ]]; then
            echo "T3"  # Normal timing
        elif [[ $ping_ms -lt 500 ]]; then
            echo "T2"  # Polite timing
        else
            echo "T1"  # Sneaky timing for slow networks
        fi
    else
        echo "$base_timing"  # Fallback to provided timing
    fi
}

# Enhanced reporting with JSON/CSV export
generate_enhanced_report() {
    local scan_results="$1"
    local output_format="$2"
    local timestamp=$(date +%Y%m%d_%H%M%S)
    
    case "$output_format" in
        "json")
            echo -e "${BLUE}üìä Generating JSON report...${NC}"
            local json_file="$OUTPUT_DIR/scan_${timestamp}.json"
            
            cat > "$json_file" << EOF
{
    "scan_timestamp": "$(date -Iseconds)",
    "scan_version": "$MODULE_VERSION",
    "results": $scan_results
}
EOF
            echo -e "${GREEN}‚úÖ JSON report: $json_file${NC}"
            ;;
        "csv")
            echo -e "${BLUE}üìä Generating CSV report...${NC}"
            local csv_file="$OUTPUT_DIR/scan_${timestamp}.csv"
            
            echo "IP,Hostname,Open_Ports,OS,Services,Vulnerabilities" > "$csv_file"
            # Parse and format scan results to CSV
            echo -e "${GREEN}‚úÖ CSV report: $csv_file${NC}"
            ;;
        *)
            echo -e "${YELLOW}Unknown format: $output_format${NC}"
            ;;
    esac
}

# Custom port list management
manage_custom_ports() {
    local action="$1"
    local port_list="$2"
    
    case "$action" in
        "add")
            CUSTOM_PORTS="${CUSTOM_PORTS},${port_list}"
            CUSTOM_PORTS=$(echo "$CUSTOM_PORTS" | sed 's/^,//' | sed 's/,,/,/g')
            echo -e "${GREEN}‚úÖ Added ports: $port_list${NC}"
            ;;
        "set")
            CUSTOM_PORTS="$port_list"
            echo -e "${GREEN}‚úÖ Set custom ports: $port_list${NC}"
            ;;
        "show")
            echo -e "${CYAN}Current custom ports: $CUSTOM_PORTS${NC}"
            ;;
        *)
            echo -e "${RED}Invalid action: $action${NC}"
            ;;
    esac
}

# Network topology mapping
network_topology_map() {
    local network_base="$1"
    
    echo -e "${PURPLE}üó∫Ô∏è  Network Topology Mapping${NC}"
    
    # Discover gateway
    local gateway=$(ip route | grep default | awk '{print $3}' | head -1)
    echo -e "${CYAN}Gateway: $gateway${NC}"
    
    # Discover DNS servers
    local dns_servers=$(grep nameserver /etc/resolv.conf | awk '{print $2}' | tr '\n' ' ')
    echo -e "${CYAN}DNS Servers: $dns_servers${NC}"
    
    # Create simple network map
    local map_file="$OUTPUT_DIR/network_map_$(date +%Y%m%d_%H%M%S).txt"
    
    cat > "$map_file" << EOF
Network Topology Map - $(date)
================================

Network Base: $network_base.0/24
Gateway: $gateway
DNS Servers: $dns_servers

Active Hosts:
-------------
EOF
    
    echo -e "${GREEN}‚úÖ Network map: $map_file${NC}"
}

#
# >>> NEW FUNCTIONS ADDED HERE <<<
#

# HTTP Service Enumeration and Banner Grabbing
http_service_enum() {
    local network_base="$1"
    local scan_type="$2"
    local port_range="$3"
    
    echo -e "${CYAN}üåê HTTP Service Enumeration & Banner Grabbing${NC}"
    
    # Set port range - default to 80 if not specified
    if [[ -z "$port_range" ]]; then
        port_range="80"
    fi
    
    local temp_results=$(mktemp)
    local timing=""
    local additional_scripts=""
    
    # Configure based on scan type
    if [[ "$scan_type" == "stealth" ]]; then
        timing="T2"
        additional_scripts="--script=banner,http-title"
        echo -e "${PURPLE}ü•∑ Stealth HTTP enumeration with basic scripts${NC}"
    else
        timing="T5"
        additional_scripts="--script=banner,http-title,http-headers,http-server-header"
        echo -e "${GREEN}‚ö° Aggressive HTTP enumeration with extended scripts${NC}"
    fi
    
    echo -e "${BLUE}Scanning ${network_base}.0/24 on ports: $port_range${NC}"
    
    # Execute the nmap HTTP enumeration
    nmap -n -Pn -sS -sV \
         -p "$port_range" \
         --open \
         $additional_scripts \
         -$timing \
         "${network_base}.0/24" \
         -oG - | grep 'open' | grep -v 'tcpwrapped' > "$temp_results"
    
    # Parse and display results
    local http_count=0
    echo -e "${GREEN}üìã HTTP Services Found:${NC}"
    echo "----------------------------------------"
    
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            ((http_count++))
            
            # Extract IP and port information
            local ip=$(echo "$line" | grep -oE "Host: [0-9.]+" | cut -d' ' -f2)
            local ports=$(echo "$line" | grep -oE "Ports: [^[:space:]]+" | cut -d' ' -f2)
            
            echo -e "${GREEN}üéØ $ip${NC}"
            echo -e "${CYAN}  ‚îî‚îÄ Open HTTP ports: $ports${NC}"
            
            # Try to extract service versions and banners
            local service_info=$(echo "$line" | grep -oE "Version: [^/]*" | sed 's/Version: //')
            if [[ -n "$service_info" ]]; then
                echo -e "${YELLOW}  ‚îî‚îÄ Service: $service_info${NC}"
            fi
        fi
    done < "$temp_results"
    
    # Extended HTTP intelligence gathering
    if [[ $http_count -gt 0 && "$scan_type" != "stealth" ]]; then
        echo ""
        echo -e "${CYAN}üîç Extended HTTP Intelligence Gathering...${NC}"
        
        # Extract unique IPs for detailed scanning
        local unique_ips=$(grep -oE "Host: [0-9.]+" "$temp_results" | cut -d' ' -f2 | sort -u)
        
        for ip in $unique_ips; do
            echo -e "${BLUE}üì° Deep scanning $ip...${NC}"
            
            # HTTP title and header enumeration
            local detail_results=$(mktemp)
            nmap -n -Pn -sS -p80,443,8080,8443,8000,3000,5000 \
                 --script=http-title,http-headers,http-server-header,http-methods \
                 -T4 "$ip" > "$detail_results" 2>/dev/null
            
            # Parse detailed results
            if grep -q "http-title" "$detail_results"; then
                local title=$(grep -A1 "http-title" "$detail_results" | tail -1 | sed 's/|_//' | xargs)
                echo -e "${GREEN}  ‚îî‚îÄ Title: $title${NC}"
            fi
            
            if grep -q "Server:" "$detail_results"; then
                local server=$(grep "Server:" "$detail_results" | head -1 | cut -d':' -f2 | xargs)
                echo -e "${YELLOW}  ‚îî‚îÄ Server: $server${NC}"
            fi
            
            rm -f "$detail_results"
        done
    fi
    
    rm -f "$temp_results"
    
    echo "----------------------------------------"
    echo -e "${BLUE}üìä HTTP Enumeration Summary:${NC}"
    echo -e "${GREEN}‚Ä¢ HTTP services found: $http_count${NC}"
    echo -e "${GREEN}‚Ä¢ Port range scanned: $port_range${NC}"
    echo -e "${GREEN}‚Ä¢ Scan type: $scan_type${NC}"
}

# Full port sweep with service detection
full_port_sweep() {
    local target="$1"
    local scan_type="$2"
    
    echo -e "${RED}üö® Full Port Sweep: $target${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  This scan may take several minutes...${NC}"
    
    local temp_results=$(mktemp)
    local timing=""
    
    if [[ "$scan_type" == "stealth" ]]; then
        timing="T2"
        echo -e "${PURPLE}ü•∑ Stealth full port scan${NC}"
    else
        timing="T4"
        echo -e "${GREEN}‚ö° Fast full port scan${NC}"
    fi
    
    # Full TCP port scan
    nmap -n -Pn -sS -sV -p- --open -$timing "$target" -oG "$temp_results" 2>/dev/null
    
    # Parse results
    local open_ports=$(grep "Ports:" "$temp_results" | grep -oE "[0-9]+/open" | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//')
    
    if [[ -n "$open_ports" ]]; then
        echo -e "${GREEN}  ‚îî‚îÄ All open ports: $open_ports${NC}"
        
        # Count total ports
        local port_count=$(echo "$open_ports" | tr ',' '\n' | wc -l)
        echo -e "${CYAN}  ‚îî‚îÄ Total open ports: $port_count${NC}"
    else
        echo -e "${YELLOW}  ‚îî‚îÄ No open ports found${NC}"
    fi
    
    rm -f "$temp_results"
}

# Web application fingerprinting
web_app_fingerprinting() {
    local network_base="$1"
    local scan_type="$2"
    
    echo -e "${PURPLE}üî¨ Web Application Fingerprinting${NC}"
    
    local web_ports="80,443,8080,8443,8000,3000,5000,9000,8888,4443"
    local temp_results=$(mktemp)
    
    # Comprehensive web app scripts
    local web_scripts="http-title,http-headers,http-server-header,http-methods,http-robots.txt,http-enum,http-wordpress-enum,http-drupal-enum"
    
    if [[ "$scan_type" == "stealth" ]]; then
        web_scripts="http-title,http-headers,http-server-header"
        echo -e "${CYAN}ü•∑ Basic web fingerprinting${NC}"
    else
        echo -e "${GREEN}‚ö° Comprehensive web fingerprinting${NC}"
    fi
    
    nmap -n -Pn -sS -sV -p "$web_ports" --open \
         --script="$web_scripts" \
         -T4 "${network_base}.0/24" > "$temp_results" 2>/dev/null
    
    # Parse and categorize findings
    echo -e "${GREEN}üìã Web Applications Discovered:${NC}"
    echo "----------------------------------------"
    
    # Extract unique hosts with web services
    local web_hosts=$(grep -B5 -A10 "http-" "$temp_results" | grep "Nmap scan report" | grep -oE "[0-9.]+" | sort -u)
    
    for host in $web_hosts; do
        echo -e "${GREEN}üåê $host${NC}"
        
        # Extract web-specific information for this host
        grep -A20 "$host" "$temp_results" | while read -r line; do
            if [[ "$line" == *"http-title"* ]]; then
                local title=$(echo "$line" | grep -oE "\|.*" | sed 's/|_//')
                echo -e "${CYAN}  ‚îî‚îÄ Title:$title${NC}"
            elif [[ "$line" == *"Server:"* ]]; then
                local server=$(echo "$line" | cut -d':' -f2- | xargs)
                echo -e "${YELLOW}  ‚îî‚îÄ Server: $server${NC}"
            elif [[ "$line" == *"robots.txt"* ]]; then
                echo -e "${PURPLE}  ‚îî‚îÄ robots.txt found${NC}"
            elif [[ "$line" == *"WordPress"* ]]; then
                echo -e "${BLUE}  ‚îî‚îÄ WordPress detected${NC}"
            elif [[ "$line" == *"Drupal"* ]]; then
                echo -e "${BLUE}  ‚îî‚îÄ Drupal detected${NC}"
            fi
        done
        echo ""
    done
    
    rm -f "$temp_results"
}

# SMB/NetBIOS enumeration for Windows environments
smb_enumeration() {
    local network_base="$1"
    local scan_type="$2"
    
    echo -e "${BLUE}üè¢ SMB/NetBIOS Enumeration${NC}"
    
    local smb_ports="139,445"
    local temp_results=$(mktemp)
    local smb_scripts="smb-os-discovery,smb-protocols,smb-security-mode,smb-enum-shares"
    
    if [[ "$scan_type" == "stealth" ]]; then
        smb_scripts="smb-os-discovery,smb-protocols"
        echo -e "${PURPLE}ü•∑ Basic SMB enumeration${NC}"
    else
        echo -e "${GREEN}‚ö° Comprehensive SMB enumeration${NC}"
    fi
    
    nmap -n -Pn -sS -p "$smb_ports" --open \
         --script="$smb_scripts" \
         -T4 "${network_base}.0/24" > "$temp_results" 2>/dev/null
    
    # Parse SMB results
    local smb_hosts=$(grep -B5 "smb-" "$temp_results" | grep "Nmap scan report" | grep -oE "[0-9.]+" | sort -u)
    local smb_count=0
    
    echo -e "${GREEN}üìã SMB Hosts Discovered:${NC}"
    echo "----------------------------------------"
    
    for host in $smb_hosts; do
        ((smb_count++))
        echo -e "${GREEN}üñ•Ô∏è  $host${NC}"
        
        # Extract SMB-specific info
        grep -A15 "$host" "$temp_results" | while read -r line; do
            if [[ "$line" == *"OS:"* ]]; then
                local os_info=$(echo "$line" | cut -d':' -f2- | sed 's/|_//' | xargs)
                echo -e "${CYAN}  ‚îî‚îÄ OS:$os_info${NC}"
            elif [[ "$line" == *"Computer name:"* ]]; then
                local computer_name=$(echo "$line" | cut -d':' -f2- | xargs)
                echo -e "${YELLOW}  ‚îî‚îÄ Computer: $computer_name${NC}"
            elif [[ "$line" == *"Domain name:"* ]]; then
                local domain_name=$(echo "$line" | cut -d':' -f2- | xargs)
                echo -e "${PURPLE}  ‚îî‚îÄ Domain: $domain_name${NC}"
            elif [[ "$line" == *"Workgroup:"* ]]; then
                local workgroup=$(echo "$line" | cut -d':' -f2- | xargs)
                echo -e "${BLUE}  ‚îî‚îÄ Workgroup: $workgroup${NC}"
            fi
        done
        echo ""
    done
    
    echo -e "${BLUE}üìä SMB Summary: $smb_count hosts${NC}"
    rm -f "$temp_results"
}

# Database service enumeration
database_enum() {
    local network_base="$1"
    local scan_type="$2"
    
    echo -e "${RED}üóÑÔ∏è  Database Service Enumeration${NC}"
    
    local db_ports="1433,3306,5432,1521,27017,6379,11211,9200,9300"
    local temp_results=$(mktemp)
    
    echo -e "${CYAN}Scanning for: MSSQL, MySQL, PostgreSQL, Oracle, MongoDB, Redis, Memcached, Elasticsearch${NC}"
    
    nmap -n -Pn -sS -sV -p "$db_ports" --open \
         --script="banner,mysql-info,ms-sql-info,oracle-sid-brute,mongodb-info,redis-info" \
         -T4 "${network_base}.0/24" -oG - | grep 'open' > "$temp_results"
    
    local db_count=0
    echo -e "${GREEN}üìã Database Services Found:${NC}"
    echo "----------------------------------------"
    
    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            ((db_count++))
            local ip=$(echo "$line" | grep -oE "Host: [0-9.]+" | cut -d' ' -f2)
            local port=$(echo "$line" | grep -oE "[0-9]+/open" | cut -d'/' -f1)
            
            # Identify database type by port
            local db_type=""
            case $port in
                1433) db_type="MSSQL" ;;
                3306) db_type="MySQL" ;;
                5432) db_type="PostgreSQL" ;;
                1521) db_type="Oracle" ;;
                27017) db_type="MongoDB" ;;
                6379) db_type="Redis" ;;
                11211) db_type="Memcached" ;;
                9200|9300) db_type="Elasticsearch" ;;
                *) db_type="Unknown DB" ;;
            esac
            
            echo -e "${RED}üóÑÔ∏è  $ip:$port ${NC}${YELLOW}($db_type)${NC}"
        fi
    done < "$temp_results"
    
    echo "----------------------------------------"
    echo -e "${BLUE}üìä Database Summary: $db_count services${NC}"
    rm -f "$temp_results"
}

# IoT and embedded device discovery
iot_device_discovery() {
    local network_base="$1"
    local scan_type="$2"
    
    echo -e "${PURPLE}üì± IoT & Embedded Device Discovery${NC}"
    
    # Common IoT ports and services
    local iot_ports="21,22,23,80,443,554,1900,5000,8080,8081,8443,9000,49152"
    local temp_results=$(mktemp)
    
    echo -e "${CYAN}Scanning for cameras, routers, smart devices, UPnP services${NC}"
    
    nmap -n -Pn -sS -sV -p "$iot_ports" --open \
         --script="http-title,upnp-info,rtsp-url-brute,ftp-anon" \
         -T4 "${network_base}.0/24" > "$temp_results" 2>/dev/null
    
    # Parse for IoT indicators
    local iot_keywords=("camera" "webcam" "dvr" "nvr" "router" "switch" "ap" "access point" "smart" "iot" "embedded")
    local iot_count=0
    
    echo -e "${GREEN}üìã Potential IoT Devices:${NC}"
    echo "----------------------------------------"
    
    # Look for IoT signatures in service banners and HTTP titles
    while IFS= read -r line; do
        local found_iot=false
        for keyword in "${iot_keywords[@]}"; do
            if [[ "$line" == *"$keyword"* ]] || [[ "$line" == *"${keyword^}"* ]]; then
                found_iot=true
                break
            fi
        done
        
        if $found_iot; then
            ((iot_count++))
            local ip=$(echo "$line" | grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | head -1)
            echo -e "${PURPLE}üì± $ip ${NC}${CYAN}(Potential IoT device)${NC}"
            echo -e "${YELLOW}  ‚îî‚îÄ Signature: $(echo "$line" | head -c 80)...${NC}"
        fi
    done < "$temp_results"
    
    # Additional UPnP discovery
    echo ""
    echo -e "${CYAN}üîç UPnP Device Discovery...${NC}"
    nmap -n -Pn -sU -p 1900 --script=upnp-info "${network_base}.0/24" 2>/dev/null | \
    grep -E "(Nmap scan report|Server:|ST:)" | \
    while read -r line; do
        if [[ "$line" == *"Nmap scan report"* ]]; then
            local upnp_ip=$(echo "$line" | grep -oE "[0-9.]+" | tail -1)
            echo -e "${GREEN}üì° $upnp_ip ${NC}${CYAN}(UPnP enabled)${NC}"
        fi
    done
    
    echo "----------------------------------------"
    echo -e "${BLUE}üìä IoT Discovery Summary: $iot_count potential devices${NC}"
    rm -f "$temp_results"
}

# Main enhanced scan function
enhanced_network_scan() {
    local network_base="$1"
    local scan_type="$2"
    local features="$3"
    
    echo -e "${PURPLE}üöÄ Enhanced Network Scan Starting...${NC}"
    echo -e "${CYAN}Network: $network_base.0/24${NC}"
    echo -e "${CYAN}Type: $scan_type${NC}"
    echo -e "${CYAN}Features: $features${NC}"
    echo ""
    
    # Initialize results array
    local discovered_hosts=()
    
    # Primary host discovery
    if [[ "$features" == *"ipv6"* ]]; then
        ipv6_discovery "$network_base" "$scan_type"
    fi
    
    if [[ "$features" == *"arp"* ]]; then
        discovered_hosts+=($(arp_network_scan "$network_base"))
    fi
    
    # Enhanced scanning for each discovered host
    for host in "${discovered_hosts[@]}"; do
        echo -e "${BLUE}üéØ Scanning $host...${NC}"
        
        # UDP scanning
        if [[ "$features" == *"udp"* ]]; then
            udp_service_scan "$host" "$scan_type"
        fi
        
        # OS detection
        if [[ "$features" == *"os"* ]]; then
            os_fingerprint "$host"
        fi
        
        # Service version detection
        if [[ "$features" == *"service"* ]] && [[ -n "$CUSTOM_PORTS" ]]; then
            service_version_scan "$host" "$CUSTOM_PORTS"
        fi
        
        # Vulnerability scanning
        if [[ "$features" == *"vuln"* ]]; then
            vulnerability_scan "$host" "$scan_type"
        fi
        
        echo ""
    done
    
    # Generate reports
    if [[ "$features" == *"report"* ]]; then
        generate_enhanced_report "$(printf '%s\n' "${discovered_hosts[@]}")" "json"
        network_topology_map "$network_base"
    fi
}

# Module menu
show_v6_menu() {
    echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${PURPLE}‚ïë             v6module - Advanced Features       ‚ïë${NC}"
    echo -e "${PURPLE}‚ïë               Version $MODULE_VERSION              ‚ïë${NC}"
    echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo "Enhanced Discovery Options:"
    echo "1. üåê IPv6 + IPv4 dual-stack scan"
    echo "2. üì° UDP + TCP comprehensive scan"
    echo "3. üñ•Ô∏è  OS fingerprinting + services"
    echo "4. üö® Full vulnerability assessment"
    echo "5. üì∂ ARP + topology mapping"
    echo "6. üîß Configure custom settings"
    echo "7. üìä Generate detailed reports"
    echo ""
    read -p "Select enhanced features (1-7): " v6_choice
}

# Export functions for main script
export -f init_v6_module
export -f enhanced_network_scan
export -f show_v6_menu
export -f ipv6_discovery
export -f udp_service_scan
export -f os_fingerprint
export -f service_version_scan
export -f vulnerability_scan
export -f arp_network_scan
export -f generate_enhanced_report
export -f network_topology_map
export -f http_service_enum
export -f full_port_sweep
export -f web_app_fingerprinting
export -f smb_enumeration
export -f database_enum
export -f iot_device_discovery
