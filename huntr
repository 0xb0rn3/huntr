#!/usr/bin/env bash

# Color codes for better user experience
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables to track what we have available
HAVE_NMAP=false
HAVE_FPING=false
HAVE_MASSCAN=false
HAVE_HPING3=false

# Enhanced stealth configuration variables
STEALTH_MODE=false
RANDOMIZE_ORDER=true
DECOY_COUNT=3
MIN_DELAY=0.1
MAX_DELAY=0.5

# Nmap optimization variables
NMAP_PARALLEL_MIN=10
NMAP_PARALLEL_MAX=50
NMAP_HOST_TIMEOUT="3s"
NMAP_DISCOVERY_PROBES=4

# Function to generate random MAC address for spoofing
generate_random_mac() {
    printf '02:%02x:%02x:%02x:%02x:%02x\n' $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256)) $((RANDOM%256))
}

# Function to get random delay between probes
get_random_delay() {
    local min_delay=$1
    local max_delay=$2
    # Generate random delay between min and max (in seconds)
    echo "scale=2; $min_delay + ($max_delay - $min_delay) * $RANDOM / 32767" | bc -l 2>/dev/null || echo "$min_delay"
}

# Enhanced function to create intelligent decoy IP list
generate_smart_decoys() {
    local network_base="$1"
    local target_range_start="$2"
    local target_range_end="$3"
    local decoy_list=""
    
    # Create decoys that blend with the network topology
    for i in $(seq 1 $DECOY_COUNT); do
        local random_host
        
        # 70% chance to use nearby IPs (more realistic)
        if (( RANDOM % 10 < 7 )); then
            # Generate IP close to target range but outside it
            local range_size=$((target_range_end - target_range_start))
            local offset=$((RANDOM % (range_size * 2) + 1))
            
            if (( target_range_start - offset > 1 )); then
                random_host=$((target_range_start - offset))
            elif (( target_range_end + offset < 254 )); then
                random_host=$((target_range_end + offset))
            else
                random_host=$((RANDOM % 254 + 1))
            fi
        else
            # 30% chance for completely random (noise)
            random_host=$((RANDOM % 254 + 1))
        fi
        
        # Avoid common gateway/broadcast/multicast ranges
        while [[ $random_host -eq 1 || $random_host -eq 254 || $random_host -eq 255 || 
                 ($random_host -ge 224 && $random_host -le 239) ]]; do
            random_host=$((RANDOM % 254 + 1))
        done
        
        if [ -n "$decoy_list" ]; then
            decoy_list="${decoy_list},${network_base}.${random_host}"
        else
            decoy_list="${network_base}.${random_host}"
        fi
    done
    
    echo "$decoy_list"
}

# Advanced nmap host discovery with intelligent filtering
optimized_nmap_discovery() {
    local network_base="$1"
    local scan_type="$2"  # "stealth" or "fast"
    
    echo -e "${BLUE}🎯 Using advanced nmap host discovery with intelligent filtering...${NC}"
    
    local nmap_args=""
    local timing_template=""
    local discovery_method=""
    
    # Configure nmap based on scan type
    if [[ "$scan_type" == "stealth" ]]; then
        echo -e "${PURPLE}🥷 STEALTH MODE: Advanced evasion techniques enabled${NC}"
        
        # Generate smart decoys for the entire range
        local decoys=$(generate_smart_decoys "$network_base" 1 254)
        echo -e "${CYAN}Using intelligent decoy IPs: $decoys${NC}"
        
        timing_template="T1"
        discovery_method="-PE -PP -PM -PO"  # Multiple ICMP types for better coverage
        
        nmap_args="--randomize-hosts \
                   --data-length $((RANDOM % 32 + 16)) \
                   --ttl $((32 + RANDOM % 32)) \
                   -D $decoys \
                   --scan-delay $(get_random_delay 0.5 2.0) \
                   --max-parallelism $NMAP_PARALLEL_MIN \
                   --min-parallelism 5 \
                   -f \
                   --spoof-mac $(generate_random_mac) \
                   --host-timeout $NMAP_HOST_TIMEOUT"
    else
        echo -e "${GREEN}⚡ FAST MODE: Optimized for speed and efficiency${NC}"
        
        timing_template="T4"
        discovery_method="-PE -PA80,443,22,21,25,53,135,139,445"  # TCP ACK to common ports
        
        nmap_args="--min-parallelism $NMAP_PARALLEL_MIN \
                   --max-parallelism $NMAP_PARALLEL_MAX \
                   --host-timeout $NMAP_HOST_TIMEOUT \
                   --max-retries 2"
    fi
    
    start_time=$(date +%s)
    
    # Execute nmap with intelligent output parsing
    echo -e "${CYAN}Discovery method: $discovery_method${NC}"
    echo -e "${CYAN}Timing template: $timing_template${NC}"
    echo ""
    
    # Use nmap's XML output for better parsing reliability
    local temp_xml=$(mktemp)
    local temp_results=$(mktemp)
    
    # Execute the nmap scan with comprehensive host discovery
    nmap -sn \
         -$timing_template \
         $discovery_method \
         $nmap_args \
         -oX "$temp_xml" \
         "${network_base}.1-254" 2>/dev/null
    
    # Parse XML output for more reliable results
    if command -v xmllint &> /dev/null; then
        # Use xmllint for precise XML parsing
        xmllint --xpath "//host[status/@state='up']/address[@addrtype='ipv4']/@addr" "$temp_xml" 2>/dev/null | \
        grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | \
        sort -V > "$temp_results"
    else
        # Fallback to grep/awk parsing with improved accuracy
        grep -E "<address addr=\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\" addrtype=\"ipv4\"/>" "$temp_xml" | \
        grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" | \
        sort -V > "$temp_results"
    fi
    
    # Enhanced result processing with host information
    local host_count=0
    echo -e "${GREEN}📋 Active hosts discovered:${NC}"
    echo "----------------------------------------"
    
    while IFS= read -r ip_addr; do
        ((host_count++))
        
        # Get hostname if available from nmap results
        local hostname=""
        if grep -q "hostname.*name=\".*\".*type=\"PTR\"" "$temp_xml"; then
            hostname=$(grep -A5 -B5 "$ip_addr" "$temp_xml" | \
                      grep -oE "hostname.*name=\"[^\"]*\"" | \
                      head -1 | \
                      sed 's/.*name="\([^"]*\)".*/\1/')
        fi
        
        # Display results with enhanced formatting
        if [[ -n "$hostname" && "$hostname" != "$ip_addr" ]]; then
            echo -e "${GREEN}🎯 $ip_addr${NC} ${CYAN}($hostname)${NC}"
        else
            echo -e "${GREEN}🎯 $ip_addr${NC}"
        fi
        
        # Add small delay in stealth mode to avoid burst patterns
        if [[ "$scan_type" == "stealth" ]]; then
            sleep $(get_random_delay 0.1 0.3)
        fi
        
    done < "$temp_results"
    
    # Cleanup temporary files
    rm -f "$temp_xml" "$temp_results"
    
    end_time=$(date +%s)
    scan_duration=$((end_time - start_time))
    
    echo "----------------------------------------"
    echo -e "${BLUE}📊 Scan Summary:${NC}"
    echo -e "${GREEN}• Active hosts found: $host_count${NC}"
    echo -e "${GREEN}• Scan duration: ${scan_duration}s${NC}"
    echo -e "${GREEN}• Average time per host: $(echo "scale=2; $scan_duration / 254" | bc -l)s${NC}"
    
    if [[ "$scan_type" == "stealth" ]]; then
        echo -e "${PURPLE}• Stealth techniques: Decoys, timing randomization, packet fragmentation${NC}"
    else
        echo -e "${CYAN}• Optimization: Parallel processing, smart timeouts, multi-probe discovery${NC}"
    fi
}

# Ultra-stealth nmap with advanced evasion - IMPROVED VERSION
ultra_stealth_nmap() {
    local network_base="$1"
    optimized_nmap_discovery "$network_base" "stealth"
}

# Fast optimized nmap - IMPROVED VERSION
fast_nmap_discovery() {
    local network_base="$1"
    optimized_nmap_discovery "$network_base" "fast"
}

# Advanced nmap port discovery for found hosts
nmap_port_discovery() {
    local network_base="$1"
    local scan_type="$2"
    
    echo -e "${BLUE}🔍 Performing port discovery on active hosts...${NC}"
    
    # First, get list of active hosts
    local temp_hosts=$(mktemp)
    local temp_xml=$(mktemp)
    
    # Quick host discovery first
    nmap -sn -T4 "${network_base}.1-254" -oX "$temp_xml" 2>/dev/null
    
    if command -v xmllint &> /dev/null; then
        xmllint --xpath "//host[status/@state='up']/address[@addrtype='ipv4']/@addr" "$temp_xml" 2>/dev/null | \
        grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" > "$temp_hosts"
    else
        grep -oE "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" "$temp_xml" > "$temp_hosts"
    fi
    
    local host_count=$(wc -l < "$temp_hosts")
    
    if [[ $host_count -eq 0 ]]; then
        echo -e "${YELLOW}No active hosts found for port scanning${NC}"
        rm -f "$temp_hosts" "$temp_xml"
        return
    fi
    
    echo -e "${GREEN}Found $host_count active hosts. Starting port discovery...${NC}"
    echo ""
    
    # Configure port scan based on type
    local port_args=""
    local ports="22,23,25,53,80,110,135,139,443,445,993,995,1723,3389,5900"
    
    if [[ "$scan_type" == "stealth" ]]; then
        echo -e "${PURPLE}🥷 Stealth port discovery with SYN stealth scan${NC}"
        port_args="-sS -T2 --randomize-hosts -f"
    else
        echo -e "${GREEN}⚡ Fast port discovery with connect scan${NC}"
        port_args="-sT -T4 --min-parallelism 20 --max-parallelism 100"
    fi
    
    # Scan each host for common ports
    while IFS= read -r host; do
        echo -e "${CYAN}Scanning $host for common services...${NC}"
        
        local port_results=$(mktemp)
        nmap $port_args -p "$ports" --open "$host" -oG "$port_results" 2>/dev/null
        
        # Parse and display open ports
        local open_ports=$(grep "Ports:" "$port_results" | \
                          grep -oE "[0-9]+/open" | \
                          cut -d'/' -f1 | \
                          tr '\n' ',' | \
                          sed 's/,$//')
        
        if [[ -n "$open_ports" ]]; then
            echo -e "${GREEN}  └─ Open ports: $open_ports${NC}"
        else
            echo -e "${YELLOW}  └─ No common ports open${NC}"
        fi
        
        rm -f "$port_results"
        
        # Small delay between hosts in stealth mode
        if [[ "$scan_type" == "stealth" ]]; then
            sleep $(get_random_delay 1.0 2.0)
        fi
        
    done < "$temp_hosts"
    
    rm -f "$temp_hosts" "$temp_xml"
}

# Function to detect dependencies including stealth tools
check_and_install_deps() {
    local pkg_manager
    local network_ok=true
    
    echo -e "${BLUE}=== Dependency Check & Auto-Installation ===${NC}"
    
    # Quick network check first
    echo -ne "${BLUE}Checking network connectivity...${NC}"
    if ping -c 1 -W 2 8.8.8.8 &> /dev/null || ping -c 1 -W 2 1.1.1.1 &> /dev/null; then
        echo -e " ${GREEN}✓ Online${NC}"
        network_ok=true
    else
        echo -e " ${RED}✗ Offline${NC}"
        echo -e "${YELLOW}Warning: No internet connection detected. Cannot install missing tools.${NC}"
        network_ok=false
    fi
    
    # Detect package manager
    pkg_manager=$(detect_package_manager)
    if [ "$pkg_manager" = "unknown" ]; then
        echo -e "${YELLOW}Warning: Unknown package manager. Manual installation may be required.${NC}"
    fi
    
    # Check core tools with improved detection
    local tools=("nmap:nmap" "fping:fping" "masscan:masscan" "hping3:hping3" "bc:bc" "shuf:coreutils" "xmllint:libxml2-utils")
    
    for tool_info in "${tools[@]}"; do
        IFS=':' read -r tool package <<< "$tool_info"
        echo -ne "${BLUE}Checking $tool...${NC}"
        
        if command -v "$tool" &> /dev/null; then
            echo -e " ${GREEN}✓ Found${NC}"
            case $tool in
                "nmap") HAVE_NMAP=true ;;
                "fping") HAVE_FPING=true ;;
                "masscan") HAVE_MASSCAN=true ;;
                "hping3") HAVE_HPING3=true ;;
            esac
        else
            echo -ne " ${YELLOW}Missing${NC}"
            if $network_ok && [ "$pkg_manager" != "unknown" ]; then
                echo -ne " - Installing..."
                if install_package "$package" "$pkg_manager"; then
                    echo -e " ${GREEN}✓ Installed${NC}"
                    case $tool in
                        "nmap") HAVE_NMAP=true ;;
                        "fping") HAVE_FPING=true ;;
                        "masscan") HAVE_MASSCAN=true ;;
                        "hping3") HAVE_HPING3=true ;;
                    esac
                else
                    echo -e " ${RED}✗ Failed${NC}"
                fi
            else
                echo -e " ${RED}✗ Cannot install${NC}"
            fi
        fi
    done
    
    echo ""
}

# Function to detect the package manager and OS
detect_package_manager() {
    if command -v apt-get &> /dev/null; then
        echo "apt"
    elif command -v yum &> /dev/null; then
        echo "yum"
    elif command -v dnf &> /dev/null; then
        echo "dnf"
    elif command -v pacman &> /dev/null; then
        echo "pacman"
    elif command -v zypper &> /dev/null; then
        echo "zypper"
    elif command -v apk &> /dev/null; then
        echo "apk"
    else
        echo "unknown"
    fi
}

# Function to install a package based on the detected package manager
install_package() {
    local package_name="$1"
    local pkg_manager="$2"
    
    case $pkg_manager in
        "apt")
            sudo apt-get update &> /dev/null && sudo apt-get install -y "$package_name" &> /dev/null
            ;;
        "yum")
            sudo yum install -y "$package_name" &> /dev/null
            ;;
        "dnf")
            sudo dnf install -y "$package_name" &> /dev/null
            ;;
        "pacman")
            sudo pacman -Sy --noconfirm "$package_name" &> /dev/null
            ;;
        "zypper")
            sudo zypper install -y "$package_name" &> /dev/null
            ;;
        "apk")
            sudo apk add "$package_name" &> /dev/null
            ;;
        *)
            return 1
            ;;
    esac
}

# Enhanced menu with improved nmap options
show_enhanced_menu() {
    echo -e "${PURPLE}=== 🥷 Enhanced Network Stealth Sweeper - Nmap Optimized ===${NC}"
    echo -e "${CYAN}Features: Intelligent filtering, XML parsing, advanced discovery${NC}"
    echo ""
    echo "Host Discovery Methods:"
    echo "1. 🥷 Ultra-stealth nmap (decoys + advanced evasion)"
    echo "2. ⚡ Fast optimized nmap (intelligent discovery)"
    echo "3. 🔍 Stealth + Port discovery (comprehensive)"
    echo "4. 🔍 Fast + Port discovery (quick comprehensive)"
    echo ""
    echo -e "${YELLOW}Nmap Configuration:${NC}"
    echo "• Parallel hosts: $NMAP_PARALLEL_MIN-$NMAP_PARALLEL_MAX"
    echo "• Host timeout: $NMAP_HOST_TIMEOUT"
    echo "• Discovery probes: Multiple ICMP + TCP ACK"
    echo "• XML parsing: $(command -v xmllint &> /dev/null && echo "Enhanced" || echo "Basic")"
    echo ""
    read -p "Select method (1-4): " method
}

# Main execution starts here
clear
echo -e "${PURPLE}╔════════════════════════════════════════════╗${NC}"
echo -e "${PURPLE}║   🥷 Enhanced Network Stealth Sweeper     ║${NC}"
echo -e "${PURPLE}║   Advanced Nmap Integration & Filtering   ║${NC}"
echo -e "${PURPLE}║   Optimized for Speed and Stealth         ║${NC}"
echo -e "${PURPLE}╚════════════════════════════════════════════╝${NC}"
echo ""

# Check and install dependencies
check_and_install_deps

# Verify nmap is available
if ! $HAVE_NMAP; then
    echo -e "${RED}ERROR: nmap is required but not available${NC}"
    echo -e "${YELLOW}Please install nmap manually and run the script again${NC}"
    exit 1
fi

# Get network base from user
read -p "Enter network base (e.g., 192.168.1): " network_base

# Validate network base format
if ! [[ $network_base =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    echo -e "${RED}Invalid network format. Please use format like: 192.168.1${NC}"
    exit 1
fi

# Show enhanced menu and handle selection
show_enhanced_menu

case $method in
    1)
        ultra_stealth_nmap "$network_base"
        ;;
    2)
        fast_nmap_discovery "$network_base"
        ;;
    3)
        ultra_stealth_nmap "$network_base"
        echo ""
        nmap_port_discovery "$network_base" "stealth"
        ;;
    4)
        fast_nmap_discovery "$network_base"
        echo ""
        nmap_port_discovery "$network_base" "fast"
        ;;
    *)
        echo -e "${RED}Invalid option selected${NC}"
        exit 1
        ;;
esac

echo ""
echo -e "${PURPLE}=== 🎯 Enhanced Nmap Performance Guide ===${NC}"
echo -e "${GREEN}Key Improvements:${NC}"
echo "• XML output parsing for reliable results"
echo "• Intelligent decoy placement near target range"
echo "• Multi-probe discovery (ICMP + TCP ACK)"
echo "• Hostname resolution from scan results"
echo "• Comprehensive scan statistics"
echo "• Optional port discovery on found hosts"
echo ""
echo -e "${YELLOW}Technical Details:${NC}"
echo "• Uses nmap's native timing templates (T1-T4)"
echo "• Parallel processing with smart limits"
echo "• Automatic retry and timeout handling"
echo "• Memory-efficient result processing"
echo -e "${CYAN}Pro Tip:${NC} Use method 2 for network admin tasks, method 1 for penetration testing"
